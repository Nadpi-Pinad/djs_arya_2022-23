/***********************************************Tasks to be done********************************************/
//Storing values from BMP280 in EEPROM
//Finding the tilt angles and the orientation of the CanSat
//Finding coordinates of the CanSat using GPS
//Storing values in SDcard using Teensy4.1
//Measuring UTC time using Teensy 4.1
//voltage divider using Teensy4.1   
//transmission of data using XBee
//Capture the photo/video according to the user input
//Servos tested
//camera tested

/********************************************************Library********************************************/
#include <EEPROM.h> //EEPROM library
#include <Adafruit_BMP280.h> //adafruit BMP280 library
#include <TimeLib.h> //UTC time library
#include <SD.h> //SD card library
#include <SPI.h> //SPI interface
#include <Adafruit_GPS.h>
#include <MPU9250_WE.h>
#include <Wire.h>
#include <TinyGPS++.h>
#include <EEPROM.h>
#include <Servo.h>

/********************************************************Variable********************************************/
uint8_t hr, mins, sec; //gps time
//char lat_dir,lng_dirn; gps direction
int sats; //gps satellite
char lat_val[10],lng_val[10],gAltitude[10];

int Actualtime,s; //rtc time
int UTChour,UTCminute,UTCsecond;
char tiltx[10], tilty[10]; //mpu tilt
float referenceAltitude,realAltitude; //Altitude
char altitude_resolved[10],temperature[10],pressure[10]; //data in string form


const float referenceVolts = 3.3; //voltage divider
const float R1 = 4700; 
const float R2 = 1000;
const float resistorFactor = 1023.0 * (R2/(R1 + R2));
const int batteryPin = A13;
float volts;
char volts_resolved[10];
int val;  //voltage divider

bool telemetryOnOff=0; //telemetry

int SoftwareState=0; //determining software state

unsigned long time_now=0; //for telemtry every second
uint32_t timer = millis();
int period=1000;
char xbee; //commands 

const int chipSelect = BUILTIN_SDCARD; //sdcrad

int trig=3; //camera

int EPC,packetCount,packetFlag; //packet count

int time_HS=0; //heatshield time
char HS = 'N',PC = 'N',Mast = 'N';//servo telemetry
char buffers[150]; //telemetry data

int flag; //EEPROM

/**************************************************Define********************************************/
#define MPU9250_ADDR 0x68
#define GPSSerial Serial1
#define GPSECHO false
#define TIME_HEADER  "T"   // Header tag for serial time sync message                                                                                                                                                                                                                                                                                                                                                             #define chipSelect BUILTIN_SDCARD//FOR ACCESSING THE SD CARD SLOT OF TEENSY 4.1
#define highalt1 16
#define highalt2 20
#define probeheight 10
#define parachute_height 6
#define probe 2
#define launch_height 3

/********************************************************Object********************************************/
Adafruit_BMP280 bmp; // I2C Interface
File myFile;
MPU9250_WE myMPU9250 = MPU9250_WE(MPU9250_ADDR);
Adafruit_GPS GPS(&GPSSerial);
TinyGPSPlus gps;
Servo heatShieldServo;
Servo parachuteServo;
Servo flagServo;

/********************************************************User Defined Functions********************************************/
void calibrate_sensors();

void bmp280();
void bmp_loop();
void bmp_calibration();

void mpu_init();
void mpu_tilt();

void gps_init();
void gps_loop();

void sdcard_1();

void rtc_set();
void rtc_loop();  

void VD();
void buffer_fun();

void packetc_setup();

void HS_deployed();
void PC_deployed();
void Mast_raised();
void probeupright();

void xbee_setup();

void video_setup();
void video_camera();

void commands();

void servo_setup();

void audio_beacon();

/********************************************************Setup********************************************/
void setup() 
{
  Serial.begin(9600);
  Serial5.begin(9600);
  GPS.begin(9600); 
  pinMode(37,OUTPUT);
  pinMode(13,OUTPUT);
  packetc_setup();
  bmp280();
  bmp_calibration();
  calibrate_sensors();
}

/*******************************************************Loop********************************************/
void loop() 
{
  
  bmp_loop();
  commands();
  
  if(SoftwareState==0){
    calibrate_sensors();
    SoftwareState=1;
  }
  
  else if(SoftwareState==1){
   //sdcard_1();
//   pinMode(13,OUTPUT);
   digitalWrite(13,HIGH); 
  if(abs(realAltitude) > launch_height)
  {
    SoftwareState=2; }}

  else if(SoftwareState==2){
  if(abs(realAltitude) >highalt1 && abs(realAltitude) <highalt2){
    SoftwareState=3; }}

  else if(SoftwareState==3){
  if(abs(realAltitude) <highalt1){
    SoftwareState=4;
  }}

  else if(SoftwareState==4){
  if(abs(realAltitude)<=probeheight)
  {
    digitalWrite(13,LOW);
    camera_video(); 
    HS_deployed();
    SoftwareState=5;}}

  else if(SoftwareState==5){
  if(abs(realAltitude) <=parachute_height) {
    PC_deployed();
    HS_deployed();
    SoftwareState=6;}
  }

  else if(SoftwareState==6){
  if(abs(realAltitude) <= probe){
    probeupright();
    SoftwareState=7;
  }}

else if(SoftwareState==7){
  if(abs(realAltitude)<=referenceAltitude){
    audio_beacon();
    Mast_raised();
    camera_video();
    SoftwareState=8;
  }}
  
  else if(SoftwareState==8){
    SoftwareState=9;
    telemetryOnOff=0;  
  }
  
  if(millis() > time_now + period)
  {
   buffer_fun();
   time_now=millis();
  }
}

/********************************************************User Defined Function Description********************************************/

//_____________________________BMP280 EEPROM________________________________________

void bmp280()
{
  Serial5.println(F("BMP280 test"));
  if (!bmp.begin(0x76))
   {
    Serial5.println(F("Could not find a valid BMP280 sensor, check wiring!"));
    //while (1);
   }

  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                  Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                  Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                  Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                  Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */
                  }

void bmp_loop()
{
    dtostrf(bmp.readTemperature(),1,1,temperature);
   
    dtostrf((bmp.readPressure()/1000),1,1,pressure); //displaying the Pressure in kPa, you can change the unit
     
    realAltitude=bmp.readAltitude()-referenceAltitude;
    dtostrf(realAltitude,1,1,altitude_resolved);
}

void bmp_calibration(){
Serial5.println("Do you want to reset the Altitude?");
while (Serial5.available()==0)
 {Serial5.println("Command not recieved");
 delay(3000);}
 commands();}
 
//_____________________________Tilt angles and orientation using MPU9250________________________________________

void mpu_init() 
{
 Wire.begin();
 if(!myMPU9250.init())
 {
  Serial5.println("MPU9250 does not respond");
 }
 else
 {
  Serial5.println("MPU9250 is connected");
 }

 Serial5.println("Position your MPU9250 flat and don’t move it – Calibrating...");
 delay(1000);
 myMPU9250.autoOffsets();
 Serial5.println("Done!");
 myMPU9250.setAccOffsets(-14240.0, 18220.0, -17280.0, 15590.0, -20930.0, 12080.0);
 myMPU9250.setAccRange(MPU9250_ACC_RANGE_2G);
 myMPU9250.enableAccDLPF(true);
 myMPU9250.setAccDLPF(MPU9250_DLPF_6);
}

void mpu_tilt() 
{
 xyzFloat angle = myMPU9250.getAngles();
 dtostrf(angle.x ,1,2,tiltx);
 dtostrf(angle.y,1,2,tilty);
}     

//__________________________________________GPS________________________________________

void gps_init()
{
 Serial5.println("Adafruit GPS library basic parsing test!");
 GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); 
 delay(1000);
 GPSSerial.println(PMTK_Q_RELEASE); 
}

void gps_loop ()
{
  hr = gps.time.hour(); 
  mins= gps.time.minute();  
  sec= gps.time.second();  
        
 dtostrf(GPS.latitude,1,4,lat_val);
 //lat_dir= (GPS.lat);
 dtostrf(GPS.longitude,1,4,lng_val);
 //lng_dirn=(GPS.lon);
 dtostrf(GPS.altitude,1,1,gAltitude);
 sats = (int)GPS.satellites;
 }

//__________________________________________SDcard________________________________________
void sdcard_1()
  {
//    while (!Serial5)
//    {}
    if (!SD.begin(chipSelect)) {
      Serial5.println("Initialization failed!");
      return;
    }
    myFile = SD.open("CodeData.csv", FILE_WRITE); }
  
//__________________________________________RTC________________________________________
void rtc_set()
{
  setSyncProvider(getTeensy3Time);
  while (!Serial5);
  delay(100);
  if (timeStatus()!= timeSet) 
  { Serial5.println("Unable to sync with the RTC"); } 
  else 
  {  Serial5.println("According to UTC Time");}
}

time_t getTeensy3Time()
{
  return Teensy3Clock.get();
}

 unsigned long processSyncMessage() {
  unsigned long pctime = 0L;
  const unsigned long DEFAULT_TIME = 1357041600; // Jan 1 2013 

  if(Serial5.find(TIME_HEADER)) {
     pctime = Serial5.parseInt();
     return pctime;
     if( pctime < DEFAULT_TIME) { // check the value is a valid time (greater than Jan 1 2013)
       pctime = 0L; // return 0 to indicate that the time is not valid
     }
  }
  return pctime;
}

void rtc_loop()
{
   if (Serial5.available()) {
    time_t t = processSyncMessage();
    if (t != 0) {
      Teensy3Clock.set(t); // set the RTC
      setTime(t);
    }
  }
   
 UTCsecond = second();
 
 if (hour()< 5 && minute()<30)
 {
    UTChour = (24+hour()-6);
    UTCminute = (60+minute()-30);
 }
  else if (hour()>=5 && minute()>=30){
   UTChour = (hour()-5);
   UTCminute = (minute()-30);
  }
  else if (hour()<5 && minute()>=30){
  UTChour = (24+hour()- 5);
   UTCminute = (minute()-30);  
  }
 else if (hour()>=5 && minute()<30){
  UTChour = (hour()-6);
 UTCminute = (60+minute()-30);
 }}

//__________________________________________Voltage Divider________________________________________

void VD()
{
  val = analogRead(batteryPin); 
 volts = (val / resistorFactor) * referenceVolts; // calculate the ratio
 dtostrf(volts,1,1,volts_resolved);
}

//______________________________________Calibration____________________________________________

void calibrate_sensors(){
  mpu_init();
  gps_init();
  servo_setup();
  rtc_set();
  xbee_setup();
  video_setup();
 // bmp280();
}

//______________________________________SERVO__________________________________________

void HS_deployed()
{
  heatShieldServo.write(0);
  time_HS = millis();
  if(millis()- time_HS >= 5000)
  {
    heatShieldServo.write(90);
    HS = 'P';
  }}

void probeupright(){
  heatShieldServo.write(0);
  time_HS = millis();
  if(millis()- time_HS >= 6000)
  {
    heatShieldServo.write(90);
  }
}
  
void PC_deployed()
{parachuteServo.write(90);
 PC = 'C';}
 
void Mast_raised()
{
  flagServo.write(180);
  Mast = 'M';
}

void servo_setup()
{
  heatShieldServo.attach(33);
  parachuteServo.attach(10);
  flagServo.attach(36);
}

void audio_beacon(){
  digitalWrite(37,HIGH);
  }

//_________________________________________EEPROM PACKET COUNT____________________________________________________________

void packetc_setup() 
{
 packetCount=EEPROM.read(5);
 packetFlag=EEPROM.read(8);
 if(packetFlag==0)
   {
      packetCount=0;
      EEPROM.write(5,packetCount);
      packetFlag=1;
      EEPROM.write(8,flag);
   }
 else
    {
     packetCount=EEPROM.read(5);
     packetCount++;
     EEPROM.write(5,packetCount);
    }
}

//_________________________________________________XBee______________________________________________________

void xbee_setup()
{
  //Serial.println( "Teensy started receiving bytes via XBee" );
   Serial5.println( "Teensy started receiving bytes via XBee" );
}

//_________________________________________________Camera____________________________________________________

void video_setup()
{
  pinMode(trig, OUTPUT);         
  digitalWrite(trig, HIGH); 
}

void camera_video()
{
  digitalWrite(trig, LOW);   
  delay(750);               
  digitalWrite(trig, HIGH); 
}

//_______________________________________XBEEcommunication_______________________________

void commands()
{
  if(Serial5.available()>0)
  {
   xbee = Serial5.read();
  }
  switch(xbee)
  {
   case '1':
   telemetryOnOff = 1;
   break;

   case '2':
   telemetryOnOff = 0;
   break;

   case 'a':
   heatShieldServo.write(0);
   break;

   case 'A':
   heatShieldServo.write(90);
   break;

   case 'b':
   parachuteServo.write(90);
   break;

   case 'B':
   parachuteServo.write(180);
   break;

   case 'C':
   flagServo.write(90);
   break;

   case 'c':
   flagServo.write(180);
   break;

   case '3':
   camera_video();   
   xbee=0;
   break;

   case '7':
   bmp_calibration();
   xbee=0;
   break;

   case '8':
   packetc_setup();
   break;

   case 'y':
   referenceAltitude = bmp.readAltitude();
   Serial5.println(referenceAltitude);
   EEPROM.write(20,referenceAltitude);
   xbee=0;
   //telemetryOnOff = 1;
   break;

   case 'n':
   referenceAltitude = EEPROM.read(20);
   break;

   case 'o':
   digitalWrite(37,HIGH);
   break;

   case 'f':
   digitalWrite(37,LOW);
   break;
  }
}

/**************************Buffer function*****************************/

void buffer_fun()
{
 if (telemetryOnOff==1)
  {
   bmp_loop();
   mpu_tilt();
   gps_loop();  
   rtc_loop();
   VD(); 
   EPC = packetCount; 
   packetCount++;
   EEPROM.write(5,packetCount);
   sprintf(buffers,"1033,%d:%d:%d,%d,%d,%s,%c,%c,%c,%s,%s,%s,%02d:%02d:%02d,%s,%s,%s,%d,%s,%s",
           UTChour, UTCminute,UTCsecond,EPC, SoftwareState, altitude_resolved,HS,PC,Mast,temperature, volts_resolved, pressure,hr, mins, sec, 
           gAltitude, lat_val, lng_val, sats, tiltx, tilty); 
   Serial.println(buffers); 
   Serial5.println(buffers);
  }
 myFile = SD.open("CodeData.csv", FILE_WRITE);
 myFile.print(buffers);
 myFile.println();
 myFile.close();
 //Load program
 int j=20;
 char array[j];
 myFile = SD.open("sd_card.csv");
 myFile.read(&array[j],array[j]);
 myFile.close();  
}